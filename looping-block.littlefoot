
// Launch Button
int launchButtonColor;
int launchButtonColorArmed;
int launchButtonPosX;
int launchButtonPosY;
int launchButtonWidth;
int launchButtonWidthDefault;
int launchButtonWidthFull;
int launchButtonHeight;
int launchButtonCC;
// Arm Button
int armButtonState;
int armButtonColor;
int armButtonArmColor;
int armButtonUnarmColor;
int armButtonPosX;
int armButtonPosY;
int armButtonWidth;
int armButtonHeight;
int armButtonCC;
// Direct Record Button
int directRecordButtonColor;
int directRecordButtonPosX;
int directRecordButtonPosY;
int directRecordButtonWidth;
int directRecordButtonHeight;
// Close Button
int closeButtonState;
int openButtonColor;
int closeButtonColor;
int closeButtonPosX;
int closeButtonPosY;
int closeButtonWidth;
int closeButtonHeight;
int closeButtonCC;
// Up Button
int upButtonColor;
int upButtonPosX;
int upButtonPosY;
int upButtonWidth;
int upButtonHeight;
int upButtonCC;
// Left Button
int leftButtonColor;
int leftButtonPosX;
int leftButtonPosY;
int leftButtonWidth;
int leftButtonHeight;
int leftButtonCC;
// Down Button
int downButtonColor;
int downButtonPosX;
int downButtonPosY;
int downButtonWidth;
int downButtonHeight;
int downButtonCC;
// Right Button
int rightButtonColor;
int rightButtonPosX;
int rightButtonPosY;
int rightButtonWidth;
int rightButtonHeight;
int rightButtonCC;
// Stop Button
int stopButtonColor;
int stopButtonPosX;
int stopButtonPosY;
int stopButtonWidth;
int stopButtonHeight;
int stopButtonCC;
// Delete Button
int deleteButtonColor;
int deleteButtonPosX;
int deleteButtonPosY;
int deleteButtonWidth;
int deleteButtonHeight;
int deleteButtonCC;
// Exclusive Arm Setting
int exclusiveArmCC;

int debugVal;

// Animation
int animX;
int animY;
int animT;
int rainbowOffset;
int rainbowR[14];
int rainbowG[14];
int rainbowB[14];
int touchesX[5];
int touchesY[5];
int touchesT[5];
int touchesRD[5];
int touchesRO[5];
int animLength;


void initialise() {
   animLength = 5;
   rainbowR[0] = 255;
   rainbowR[1] = 255;
   rainbowR[2] = 255;
   rainbowR[3] = 191;
   rainbowR[4] = 84;
   rainbowR[5] = 0;
   rainbowR[6] = 0;
   rainbowR[7] = 0;
   rainbowR[8] = 0;
   rainbowR[9] = 0;
   rainbowR[10] = 42;
   rainbowR[11] = 148;
   rainbowR[12] = 255;
   rainbowR[13] = 255;

   rainbowG[0] = 0;
   rainbowG[1] = 106;
   rainbowG[2] = 212;
   rainbowG[3] = 255;
   rainbowG[4] = 255;
   rainbowG[5] = 255;
   rainbowG[6] = 255;
   rainbowG[7] = 255;
   rainbowG[8] = 169;
   rainbowG[9] = 63;
   rainbowG[10] = 0;
   rainbowG[11] = 0;
   rainbowG[12] = 0;
   rainbowG[13] = 0;

   rainbowB[0] = 0;
   rainbowB[1] = 0;
   rainbowB[2] = 0;
   rainbowB[3] = 0;
   rainbowB[4] = 0;
   rainbowB[5] = 21;
   rainbowB[6] = 127;
   rainbowB[7] = 233;
   rainbowB[8] = 255;
   rainbowB[9] = 255;
   rainbowB[10] = 255;
   rainbowB[11] = 255;
   rainbowB[12] = 255;
   rainbowB[13] = 148;
    
    // Launch Button
    launchButtonColor = makeARGB(50, 25, 255, 25);
    launchButtonColor = makeARGB(50, 25, 255, 25);
    launchButtonColorArmed = makeARGB(50, 255, 25, 25);
    launchButtonWidthDefault = 12;
    launchButtonWidthFull = 15;
    launchButtonWidth = launchButtonWidthDefault;
    launchButtonPosX = 0;
    launchButtonPosY = 12;
    launchButtonWidth = 10;
    launchButtonHeight = 3;
    launchButtonCC = 7;
    // Arm Button
    armButtonState = 0;
    armButtonArmColor = makeARGB(50, 255, 0, 0);
    armButtonUnarmColor = makeARGB(50, 25, 255, 25);
    armButtonColor = armButtonArmColor;
    armButtonPosX = 0;
    armButtonPosY = 9;
    armButtonWidth = 3;
    armButtonHeight = 3;
    armButtonCC = 8;
    // Direct Record Button
    directRecordButtonColor = makeARGB(50, 255, 25, 25);
    directRecordButtonPosX = 10;
    directRecordButtonPosY = 12;
    directRecordButtonWidth = 5;
    directRecordButtonHeight = 3;
    // Close Button
    closeButtonState = 0;
    openButtonColor = makeARGB(50, 150, 255, 150);
    closeButtonColor = makeARGB(50, 255, 150, 150);
    closeButtonPosX = 0;
    closeButtonPosY = 0;
    closeButtonWidth = 3;
    closeButtonHeight = 3;
    closeButtonCC = 5;
    // Up Button
    upButtonColor = makeARGB(50, 255, 255, 255);
    upButtonPosX = 3;
    upButtonPosY = 0;
    upButtonWidth = 3;
    upButtonHeight = 3;
    upButtonCC = 1;
    // Left Button
    leftButtonColor = makeARGB(50, 255, 255, 255);
    leftButtonPosX = 0;
    leftButtonPosY = 3;
    leftButtonWidth = 3;
    leftButtonHeight = 3;
    leftButtonCC = 2;
    // Down Button
    downButtonColor = makeARGB(30, 255, 255, 255);
    downButtonPosX = 3;
    downButtonPosY = 3;
    downButtonWidth = 3;
    downButtonHeight = 3;
    downButtonCC = 3;
    // Right Button
    rightButtonColor = makeARGB(50, 255, 255, 255);
    rightButtonPosX = 6;
    rightButtonPosY = 3;
    rightButtonWidth = 3;
    rightButtonHeight = 3;
    rightButtonCC = 4;
    // Stop Button
    stopButtonColor = makeARGB(50, 50, 50, 255);
    stopButtonPosX = 12;
    stopButtonPosY = 9;
    stopButtonWidth = 3;
    stopButtonHeight = 3;
    stopButtonCC = 9;
    // Delete Button
    deleteButtonColor = makeARGB(100, 255, 0, 0);
    deleteButtonPosX = 11;
    deleteButtonPosY = 5;
    deleteButtonWidth = 3;
    deleteButtonHeight = 3;
    deleteButtonCC = 10;


    // Hidden/Internal Controls
    exclusiveArmCC = 11;

    // Animation
    animX = 7;
    animY = 7;
    animT = 15;
    rainbowOffset = 0;
}

int touchCC;
void touchStart (int index, float x_float, float y_float, float z, float vz)
{
    int x = convertPositionToPixel(x_float);
	int y = convertPositionToPixel(y_float);
	
	int i = 0;
	int touchI = 0;
	for (i = 0; i < 5; i++) {
	   if (touchesT[i] > (14 + animLength) || touchesT[i] == 0) {
	      touchI = i;
	      break;
	   }
	   touchI = touchesT[touchI] < touchesT[i] ? i : touchI;
	}
	touchesT[touchI] = 1;
	touchesX[touchI] = x;
	touchesY[touchI] = y;
	touchesRO[touchI] = getRandomInt(25) - 12;
	touchesRD[touchI] = getRandomInt(2);

	touchCC = -1;
	
    // Launch Button
    if (x >= launchButtonPosX && x < launchButtonPosX + (armButtonState == 1 ? launchButtonWidthFull : launchButtonWidth) && y >= launchButtonPosY && y < launchButtonPosY + launchButtonHeight) {
       sendCC(0, launchButtonCC, 127);
       touchCC = launchButtonCC;
    }
    // Arm Button
    if (armButtonState != 2 && x >= armButtonPosX && x < armButtonPosX + armButtonWidth && y >= armButtonPosY && y < armButtonPosY + armButtonHeight) {
       sendCC(0, armButtonCC, armButtonState == 0 ? 64 : 0);
       touchCC = exclusiveArmCC;
    }
    if (armButtonState == 0 && x >= directRecordButtonPosX && x < directRecordButtonPosX + directRecordButtonWidth && y >= directRecordButtonPosY && y < directRecordButtonPosY + directRecordButtonHeight) {
    //        sendCC(0, stopButtonCC, 127);
//        sendCC(0, stopButtonCC, 0);
       sendCC(0, exclusiveArmCC, 127);
       sendCC(0, armButtonCC, 64);
       sendCC(0, launchButtonCC, 127);
       sendCC(0, leftButtonCC, 127);
       sendCC(0, leftButtonCC, 0);
       sendCC(0, stopButtonCC, 127);
       sendCC(0, stopButtonCC, 0);
       sendCC(0, rightButtonCC, 127);
       sendCC(0, rightButtonCC, 0);
       
       touchCC = launchButtonCC;
    }
    // Close Button
    if (x >= closeButtonPosX && x < closeButtonPosX + closeButtonWidth && y >= closeButtonPosY && y < closeButtonPosY + closeButtonHeight) {
       sendCC(0, closeButtonCC, closeButtonState == 2 ? 64 : 127);
    }
    // Up Button
    if (x >= upButtonPosX && x < upButtonPosX + upButtonWidth && y >= upButtonPosY && y < upButtonPosY + upButtonHeight) {
       sendCC(0, upButtonCC, 127);
       touchCC = upButtonCC;
    }
    // Left Button
    if (x >= leftButtonPosX && x < leftButtonPosX + leftButtonWidth && y >= leftButtonPosY && y < leftButtonPosY + leftButtonHeight) {
       sendCC(0, leftButtonCC, 127);
       touchCC = leftButtonCC;
    }
    // Down Button
    if (x >= downButtonPosX && x < downButtonPosX + downButtonWidth && y >= downButtonPosY && y < downButtonPosY + downButtonHeight) {
       sendCC(0, downButtonCC, 127);
       touchCC = downButtonCC;
    }
    // Right Button
    if (x >= rightButtonPosX && x < rightButtonPosX + rightButtonWidth && y >= rightButtonPosY && y < rightButtonPosY + rightButtonHeight) {
       sendCC(0, rightButtonCC, 127);
       touchCC = rightButtonCC;
    }
    // Stop Button
    if (x >= stopButtonPosX && x < stopButtonPosX + stopButtonWidth && y >= stopButtonPosY && y < stopButtonPosY + stopButtonHeight) {
       sendCC(0, stopButtonCC, 127);
       touchCC = stopButtonCC;
    }
    // Delete Button
    if (x >= deleteButtonPosX && x < deleteButtonPosX + deleteButtonWidth && y >= deleteButtonPosY && y < deleteButtonPosY + deleteButtonHeight) {
       sendCC(0, deleteButtonCC, 127);
       touchCC = deleteButtonCC;
    }


   // log(x);
   // log(y);

    
    //process the touch
  
	
}

void touchEnd (int index, float x_float, float y_float, float z, float vz)
{
    
   if (touchCC != -1) {   
     sendCC(0, touchCC, 0);
     sendCC(0, exclusiveArmCC, 64);
     
     touchCC = -1;
   }
    
    //log(x);
    //log(y);
}

void handleMIDI (int byte1, int cc, int value)
{
    if (cc == closeButtonCC) {
      // debugVal = value;
      closeButtonState = value == 0 ? 0 : value == 127 ? 2 : 1;
      //launchButtonColor = makeARGB(255, getRandomInt(255), getRandomInt(255), getRandomInt(255));
      //log(444);
      //log(byte1);
      //log(cc);
      //log(value);
    }
    if (cc == armButtonCC) {
      // debugVal = value;
      armButtonState = value == 0 ? 0 : value == 127 ? 2 : 1;
 
      //launchButtonColor = makeARGB(255, getRandomInt(255), getRandomInt(255), getRandomInt(255));
      //log(444);
      //log(byte1);
      //log(armButtonState);
      //log(cc);
      //log(value);
    }
    
    
    //launchButtonColor = makeARGB(255, getRandomInt(255), getRandomInt(255), getRandomInt(255));
}

int pi;
void repaint()
{
   //The fillRect and blendRect functions are used many times here.
   //They have the following 5 arguments:
   // - colour: an RGB (fillRect) or ARGB (blendRect) colour
   // - x: the x/horizontal pixel position of the top-left corner of the rectangle,
   //      where 0 is the left side of the Lightpad and 14 is the right side.
   // - y: the y/vertical pixel position of the top-left corner of the rectangle,
   //      where 0 is the top side of the Lightpad and 14 is the bottom side.
   // - width: the pixel width of the rectangle to draw, in the range of 1-15.
   // - height: the pixel height of the rectangle to draw, in the range of 1-15.
   
   //first clear the display
   clearDisplay();
   //log(debugVal);




   // Launch Button
   blendRect(armButtonState == 1 ? launchButtonColorArmed : launchButtonColor, launchButtonPosX, launchButtonPosY, armButtonState == 1 ? launchButtonWidthFull : launchButtonWidth, launchButtonHeight);
   // Arm Button
   if (armButtonState != 2) { 
      blendRect(armButtonState == 1 ? armButtonUnarmColor : armButtonArmColor, armButtonPosX, armButtonPosY, armButtonWidth, armButtonHeight);
   }
   if (armButtonState == 0) {
       blendRect(directRecordButtonColor, directRecordButtonPosX, directRecordButtonPosY, directRecordButtonWidth, directRecordButtonHeight);
   }
   // Close Button
   if (closeButtonState == 1) {
      blendRect(openButtonColor, closeButtonPosX, closeButtonPosY + closeButtonHeight / 2, closeButtonWidth, closeButtonHeight / 2);
      blendRect(openButtonColor, closeButtonPosX + closeButtonWidth / 2, closeButtonPosY, closeButtonWidth / 2, closeButtonHeight);
   } else if (closeButtonState == 2) {
      blendRect(closeButtonColor, closeButtonPosX, closeButtonPosY + (closeButtonHeight / 2), closeButtonWidth, closeButtonHeight / 2);
   }
   // Up Button
   blendRect(upButtonColor, upButtonPosX, upButtonPosY, upButtonWidth, upButtonHeight);

   // Left Button
   blendRect(leftButtonColor, leftButtonPosX, leftButtonPosY, leftButtonWidth, leftButtonHeight);
   // Down Button
   blendRect(downButtonColor, downButtonPosX, downButtonPosY, downButtonWidth, downButtonHeight);
   // Right Button
   blendRect(rightButtonColor, rightButtonPosX, rightButtonPosY, rightButtonWidth, rightButtonHeight);
   // Stop Button
   blendRect(stopButtonColor, stopButtonPosX, stopButtonPosY, stopButtonWidth, stopButtonHeight);
   // Delete Button
   blendPixel(deleteButtonColor, deleteButtonPosX, deleteButtonPosY);
   blendPixel(deleteButtonColor, deleteButtonPosX + 1, deleteButtonPosY + 1);
   blendPixel(deleteButtonColor, deleteButtonPosX + 2, deleteButtonPosY);
   blendPixel(deleteButtonColor, deleteButtonPosX, deleteButtonPosY + 2);
   blendPixel(deleteButtonColor, deleteButtonPosX + 2, deleteButtonPosY + 2);
   
   // Rainbow Effect
   int iT = 0;
   for (iT = 0; iT < 5; iT++) {
      if (touchesT[iT] <= 14 + animLength && touchesT[iT] >= 1) {
         int i;
    
         for (i = 0; i < animLength; i++) { 
            int animT2 = touchesT[iT] - i - 1;
            
            int rainbowI = touchesRD[iT] == 1 ? touchesRO[iT] + animT2 : touchesRO[iT] - animT2;
            
            while (rainbowI > 13) {
               rainbowI -= 13;
            }
            while (rainbowI < 0) {
               rainbowI += 13;
            }
         
            //log(rainbowI);
            int rbR = rainbowR[rainbowI];
            int rbG = rainbowG[rainbowI];
            int rbB = rainbowB[rainbowI];
            int maxX = touchesX[iT] >= 6 ? touchesX[iT] : 13 - touchesX[iT];
            int maxY = touchesY[iT] >= 6 ? touchesY[iT] : 13 - touchesY[iT];
            int maxXY = max(maxX, maxY);
            int lX = touchesX[iT] - animT2;
            int rX = touchesX[iT] + animT2;
            int i3 = 0;
            int mainColor = makeARGB(255 - 255 / animLength * i, rbR, rbG, rbB);
            int offColor = makeARGB(max(0, (255 - 60 / animLength * i) - 220), rbR, rbG, rbB);
            if (lX >=0 && lX <= touchesX[iT]) {
               if (animT2 + i3 <= maxXY) {
                  blendPixel(offColor, lX, touchesY[iT] - 1);
                  blendPixel(offColor, lX, touchesY[iT] + 1);
               }
               blendPixel(mainColor, lX, touchesY[iT]);
            }
            if (rX <= 14 && rX >= touchesX[iT]) {
               if (animT2 + i3 <= maxXY + 1) {
                  blendPixel(offColor, rX, touchesY[iT] + 1);
                  blendPixel(offColor, rX, touchesY[iT] - 1);
               }
               blendPixel(mainColor, rX, touchesY[iT]);
            }

            int tY = touchesY[iT] - animT2;
            int bY = touchesY[iT] + animT2;
            if (tY >= 0 && tY < touchesY[iT]) {
               if (animT2 + i3 <= maxXY) {
                  blendPixel(offColor, touchesX[iT] - 1, tY);
                  blendPixel(offColor, touchesX[iT] + 1, tY);
               }
               blendPixel(mainColor, touchesX[iT], tY);
            }
            if (bY <= 14 && bY > touchesY[iT]) {
               if (animT2 + i3 <= maxXY + 1) {
                  blendPixel(offColor, touchesX[iT] - 1, bY);
                  blendPixel(offColor, touchesX[iT] + 1, bY);
               }
               blendPixel(mainColor, touchesX[iT], bY);
            }
         }
         
         //if (pi == 4) {
            touchesT[iT] += 1;
         //}
      }
   }
   pi += 1;
   if (pi == 5) {
       pi = 0;
   }
}

int convertPositionToPixel (float pos) 
{ 
    //the Lightpad surface x/y position values may not be exactly 0-2
    //so assume the upper value may be a bit less than 2.
    return int(map(pos, 0.0, 1.9, 0.0, 14.0)); 
}

